using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO.Ports;

namespace MillSuppoter
{
    public partial class MainForm : Form
    {
        private SerialPort Com;
        // private Toilet FrmToilet;
        private TltRoom[] TRM;
        private DateTime[] dt;

        public MainForm()
        {
         //   FrmToilet = new Toilet();
            InitializeComponent();
            TRM = new TltRoom[5];
            dt = new DateTime[5];
            for (int i = 0; i < 5; i++)
            {
                TRM[i] = new TltRoom();
                dt[i] = new DateTime();
            }
        }

        private void Form1_Activated(object sender, EventArgs e)
        {
            this.Com = new SerialPort();

            this.Com.DataReceived += new System.IO.Ports.SerialDataReceivedEventHandler(this.Com_DataReceived);

            CheckForIllegalCrossThreadCalls = false;

        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {   
            if(Com.IsOpen)
                Com.Close();
        }

        private void 아두이노연결AToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ConnetCom FrmCntCom = new ConnetCom();

            FrmCntCom.ShowDialog();
            if(FrmCntCom.CdnToCnt == 1)
            {
                //Serial 셋팅

                if (ConnectCom(FrmCntCom.ComName,FrmCntCom.Bauad) == -1)
                    MessageBox.Show("아두이노 연결에 실패하였습니다.");

                if (Com.IsOpen == false)
                {
                    MessageBox.Show("연결 안됨");
                }
                else
                {
                    this.Text += " Connected : " + Com.PortName;
                    MessageBox.Show("연결!!");
                    timer1.Start();
                    
                }
            }
            else if(FrmCntCom.CdnToCnt == -1){
                MessageBox.Show("해제");
                this.Text = "스마트 병영";
                DisConnectCom();
            }
        }


        public int ConnectCom(string ComNum,int BaudRate)
        {
            try
            {
                Com.PortName = ComNum;
                Com.BaudRate = BaudRate;
                Com.DataBits = 8;
                Com.Parity = Parity.None;
                Com.StopBits = StopBits.One;

            }
            catch{
                return -1;
            }

            Com.Open();
            Com.BaseStream.WriteTimeout = 1;
            return 0;
        }

        public void DisConnectCom()
        {
            Com.Close();
        }

    
        private delegate void DelegateFunction(char sData);

        private void DelegateFunc(char sData)
        {
            if (textBox1.InvokeRequired)
            {
                DelegateFunction call = new DelegateFunction(DelegateFunc);
                this.Invoke(call, sData);
            }
            else
            {
                textBox1.Text += (char)sData;
            }
        }


        private void DecodeCommand(string C)
        {
            string[] result = C.Split(new char[] { ' ' });

            if (result[0] == "CMD") //명령어일 경우
            {
                if (result[1] == "TLT") //화장실 관련
                {
                    ExcuteTltCommand(Cmd.Substring(Cmd.IndexOf("TLT") + 4));
                }
            }
        }

        public void ExcuteTltCommand(string cmd)
        {
            string[] Params = cmd.Split(new char[] { ' ' });

            int roomNum = 0;
            int.TryParse(Params[0], out roomNum);

            int roomStatus = 0;
            int.TryParse(Params[1], out roomStatus);

            TRM[roomNum].Status = roomStatus;

            Invalidate();
        }

        private string Cmd;

        private void Com_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            SerialPort sp = (SerialPort)sender;

            string msg = sp.ReadExisting();
            
            textBox1.Text += msg;
            string[] result;
            
            foreach(char c in msg)
            {
                if(c == '\n')
                {
                    DecodeCommand(Cmd);
                    Cmd = "";
                }
                else
                {
                    Cmd += c;
                }
            }

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            int cnt = 0;
            for(int i = 0;i < 5;i++)
            {
                if (TRM[i].IsDoorOpen)
                {
                    cnt++;
                    dt[i] = DateTime.Parse("00:00:00");
                }
                else
                {
                    dt[i] = dt[i].AddSeconds(1);
                    if(dt[i].Second >= 10)
                    {
                        TRM[i].Status = (0x07); //Danger
                     
                    }
                    if(TRM[i].Danger == true)
                    {
                        MessageBox.Show("위험");
                        TRM[i].Danger == false;
                    }

                }

                for (int i1 = 0; i1 < this.groupBox1.Controls.Count; i1++)
                {
                    if (this.groupBox1.Controls[i1].Name == ("maskedTextBox" + (i + 1).ToString()))
                    {
                        groupBox1.Controls[i1].Text = dt[i].ToString("mm:ss");
                    }
                }
            }


            this.LBToilet.Text = cnt.ToString() + "/5";
        }



        private void button2_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            try {
                Com.Write(this.textBox2.Text);
                textBox2.Text = "";
            }
            catch
            {

            }

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void groupBox1_Paint(object sender, PaintEventArgs e)
        {
           
            for (int i = 0; i < 5; i++)
            {
         
                TRM[i].DrawRoom(e.Graphics, 100, 20 + (i * (TRM[i].Height + 30)));
            }
        }

        private void MainForm_Paint(object sender, PaintEventArgs e)
        {
            for (int i = 0; i < 5; i++)
            {
                TRM[i].DrawRoom(e.Graphics, 427 + 100, 20 + 27 + (i * (TRM[i].Height + 30)));
            }

            groupBox1.Invalidate();
        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            MessageBox.Show("Te");
        }
    }


    public class TltRoom
    {
        private bool DoorStatus;
        private bool WaterStatus;
        public bool Danger;
        private Pen pBlue, pRed;
        public int Height { get { return 100; } }
        public int Width { get { return 100; } }

        public bool IsDoorOpen { get { return DoorStatus; } set { DoorStatus = value; } }
        public bool IsWaterOverflow { get { return WaterStatus; } set { WaterStatus = value; } }

        public int Status
        {
            set
            {
                if((value & 0x01) == 1)
                {
                    IsDoorOpen = false;
                }
                else
                {
                    IsDoorOpen = true;
                }
                
                if((value & 0x08) == 1)
                {
                    Danger = true;
                }
                else
                {
                    Danger = false;
                }
            }
        }

        public TltRoom()
        {
            IsDoorOpen = true;
            IsWaterOverflow = false;
            Danger = false;
            pBlue = new Pen(Color.Blue);
            pRed = new Pen(Color.Red);
        }

     

        public void DrawRoom(Graphics g, int x, int y)
        {
            Pen tPen;

            if (this.IsDoorOpen == false)
                tPen = pRed;
            else
                tPen = pBlue;

            g.DrawRectangle(tPen, new Rectangle(x - 1, y - 1, Width + 1, Height + 1));
        }
    }
}

